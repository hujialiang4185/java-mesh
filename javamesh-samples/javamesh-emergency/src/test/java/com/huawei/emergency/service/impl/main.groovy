package com.huawei.emergency.service.impl

import HTTPClient.Cookie

/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.AfterProcess
import net.grinder.scriptengine.groovy.junit.annotation.AfterThread
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.hamcrest.Matchers
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.assertThat;

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author Gisoo Gwon
 */
@RunWith(GrinderRunner)
class Login {
    public static GTest test;
    public static HTTPRequest request;

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000;
        test = new GTest(1, "login test");
        request = new HTTPRequest();
        test.record(this, "test");
        println("beforeProcess");
    }

    @BeforeThread
    public void beforeThread() {
        grinder.statistics.delayReports = true;

        // reset to the all cookies
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext();
        CookieModule.listAllCookies(threadContext).each {
            CookieModule.removeCookie(it, threadContext);
        }

        // do login & save to the login info in cookies
        NVPair[] params = [new NVPair("id", "MY_ID"), new NVPair("pw", "MY_PASSWORD")];
        //HTTPResponse res = request.POST("https://login.site.com/login/do", params);
        //cookies = CookieModule.listAllCookies(threadContext);
        println("beforeThread");
    }

    @Before
    public void before() {
        // set cookies for login state
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext();
        [].each {
            CookieModule.addCookie(it, threadContext);
            grinder.logger.info("{}", it);
        }
        Cookie cookie = new Cookie("JSESSIONID", "3F8DFE39DF3B9669EEC13AC3E2E403DB", "127.0.0.1", "/argus-emergency", null, true);
        CookieModule.addCookie(cookie, threadContext);
        println("before");
    }

    @Test
    public void test() {
        println(System.currentTimeMillis())
        println(Thread.currentThread());
        request.setHeaders([new NVPair("Cookie", "JSESSIONID=3F8DFE39DF3B9669EEC13AC3E2E403DB"), new NVPair("Cookie", "JSESSIONID=3F8DFE39DF3B9669EEC13AC3E2E403DB")] as NVPair[]);
        HTTPResponse result = request.GET("http://127.0.0.1:9093/argus-emergency/api/plan?current=1&pageSize=5");
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, Matchers.not(200));
        }
        request.POST("","".bytes)
        request.TR
    }

    @Test
    public void hello() {
        println(System.currentTimeMillis())
        println(Thread.currentThread());
        println(grinder.threadNumber);
        println("Hello, World!");
        println(System.currentTimeMillis())
    }

    @After
    public void after() {
        println("after");
    }

    @AfterThread
    public void afterThread() {
        println("afterThread");
    }

    @AfterProcess
    public static void afterProcess() {
        println("afterProcess");
    }
}
