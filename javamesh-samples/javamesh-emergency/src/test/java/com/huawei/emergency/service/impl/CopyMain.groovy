package com.huawei.emergency.service.impl

import HTTPClient.CookieModule
import HTTPClient.HTTPResponse
import HTTPClient.NVPair
import net.grinder.plugin.http.HTTPPluginControl
import net.grinder.plugin.http.HTTPRequest
import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.AfterProcess

/*
 * Copyright (C) Huawei Technologies Co., Ltd. 2021-2021. All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.grinder.scriptengine.groovy.junit.annotation.AfterThread
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.hamcrest.Matchers
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

import static net.grinder.script.Grinder.grinder
import static org.junit.Assert.assertThat;

/**
 * A simple example using the HTTP plugin that shows the retrieval of a
 * single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author Gisoo Gwon
 */
@RunWith(GrinderRunner)
class CopyMain {
    public static int testNumber = 0;
    public static GTest test;
    public static HTTPRequest request;
    public Object cookies = [];

    @BeforeProcess
    public static void beforeProcess() {
        HTTPPluginControl.getConnectionDefaults().timeout = 6000;
        test = new GTest(1, "login test");
        request = new HTTPRequest();
        test.record(this, "test");
        println("beforeProcess");
    }

    @BeforeThread
    public void beforeThread() {
        grinder.statistics.delayReports = true;

        // reset to the all cookies
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext();
        cookies = CookieModule.listAllCookies(threadContext);
        cookies.each {
            CookieModule.removeCookie(it, threadContext);
        }

        // do login & save to the login info in cookies
        NVPair[] params = [new NVPair("id", "MY_ID"), new NVPair("pw", "MY_PASSWORD")];
        //HTTPResponse res = request.POST("https://login.site.com/login/do", params);
        cookies = CookieModule.listAllCookies(threadContext);
        println("beforeThread");
    }

    @Before
    public void before() {
        // set cookies for login state
        def threadContext = HTTPPluginControl.getThreadHTTPClientContext();
        cookies.each {
            CookieModule.addCookie(it, threadContext);
            grinder.logger.info("{}", it);
        }
        println("before");
    }

    @Test
    public void test() {
        println(System.currentTimeMillis())
        println(Thread.currentThread());
        request.setHeaders([new NVPair("Cookie", "JSESSIONID=F9C0C189E20ABC6D46F82C97527604AA; SESSION=ZTE1Njc0MTMtNjRkMC00MDgwLWFhNzktOGRkODNlMDA1N2Ex; Idea-3f9c308c=fa269f98-674f-4da8-bf3f-de95dc189f5c; XXL_JOB_LOGIN_IDENTITY=7b226964223a312c22757365726e616d65223a2261646d696e222c2270617373776f7264223a226531306164633339343962613539616262653536653035376632306638383365222c22726f6c65223a312c227065726d697373696f6e223a6e756c6c7d; JSESSIONID=201A94A5EE768AFD822EC4EA11C95F79")] as NVPair[]);
        HTTPResponse result = request.GET("http://127.0.0.1:9093/argus-emergency/api/plan?current=1&pageSize=5");
        if (result.statusCode == 301 || result.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", result.statusCode);
        } else {
            assertThat(result.statusCode, Matchers.not(200));
        }
    }

    @Test
    public void hello() {
        println(System.currentTimeMillis())
        println(Thread.currentThread());
        println(grinder.threadNumber);
        println("Hello, World!");
        println(System.currentTimeMillis())
    }

    @After
    public void after() {
        println("after");
    }

    @AfterThread
    public void afterThread() {
        println("afterThread");
    }

    @AfterProcess
    public static void afterProcess() {
        println("afterProcess");
    }

    @Test
    public void say() {
        println("Hello, World!");
        println(grinder.threadNumber);
    }

    public int nextTestNumber() {
        return ++testNumber;
    }

    public int getVusers() {
        int totalAgents = Integer.parseInt(grinder.getProperties().get("grinder.agents").toString())
        int totalProcesses = Integer.parseInt(grinder.properties.get("grinder.processes").toString())
        int totalThreads = Integer.parseInt(grinder.properties.get("grinder.threads").toString())
        return totalAgents * totalProcesses * totalThreads
    }

    public int getRunThreadNum() {
        int agentNum = grinder.agentNumber
        int processNum = grinder.processNumber
        int threadNum = grinder.threadNumber
        return  (agentNum + 1) * (processNum + 1) * (threadNum + 1)
    }
}